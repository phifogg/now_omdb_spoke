<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_vtable">
    <sys_script_vtable action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>false</advanced>
        <cache_isolation_level>USER</cache_isolation_level>
        <cache_strategy>CACHE_BY_QUERY</cache_strategy>
        <cache_ttl>0</cache_ttl>
        <name>OMDB Movies</name>
        <script><![CDATA[(function executeQuery(v_table, v_query) {
    // Main API:
    //    v_table.addRow({ ... }) - adds a row to the result set

    // There are also query helper methods
    //    v_query.getEncodedQuery() - returns encoded querystring
    //    v_query.getCondition(field) - returns encoded querystring for the given field (includes field name, operator, and value)
    //    v_query.getParameter(field) - returns parameter for the given field (only includes value for equality conditions)
    //    v_query.isGet() - returns whether the query is a single get by sys_id
    //    v_query.getSysId() - returns parameter for sys_id field
    //    v_query.isTextSearch() - returns whether the query contains a text query parameter
    //    v_query.getTextSearch() - returns text search query parameter (internal field name 123TEXTQUERY321)
    //    v_query.getFirstRowWanted() - returns the first row to include
    //    v_query.getLastRowWanted() - returns the last row to include

    // Note: You must define sys_id for each row so that forms and lists for this table work properly

    // Your code goes here
    // v_table.addRow({...})

    var title = v_query.getParameter('title');
    var title_query = v_query.getCondition('title');
    title_query = title_query.split('LIKE');
    if (title_query.length > 1) {
        title = title_query[1];
    }

    try {
        var inputs = {};
        inputs['title'] = title; // String 

        // Execute Synchronously: Run in foreground. Code snippet has access to outputs.
        var result = sn_fd.FlowAPI.getRunner().action('x_snc_omdb_spoke.search_by_title').inForeground().withInputs(inputs).run();
        var outputs = result.getOutputs();

        // Get Outputs:
        // Note: outputs can only be retrieved when executing synchronously.
        var strMovies = outputs['movies']; // Array.Object
        var movies = strMovies.Search;

        for (var i = 0; i < movies.length; i++) {
            v_table.addRow({
                "title": movies[i].Title + '',
                "year": movies[i].Year + '',
                "imdb_id": movies[i].imdbID + '',
                "sys_id": movies[i].imdbID + ''
            });
        }



    } catch (ex) {
        gs.error(JSON.stringify(ex));
    }

})(v_table, v_query);]]></script>
        <sys_class_name>sys_script_vtable</sys_class_name>
        <sys_created_by>daniel.draes</sys_created_by>
        <sys_created_on>2023-08-08 09:44:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9c3ae1111b28b11013de99f1b24bcbb5</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>OMDB Movies</sys_name>
        <sys_package display_value="OMDB Spoke" source="x_snc_omdb_spoke">135051601bd43110c9c10d02604bcb48</sys_package>
        <sys_policy/>
        <sys_scope display_value="OMDB Spoke">135051601bd43110c9c10d02604bcb48</sys_scope>
        <sys_update_name>sys_script_vtable_9c3ae1111b28b11013de99f1b24bcbb5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-03 09:10:24</sys_updated_on>
        <table>x_snc_omdb_spoke_st_omdb_movie</table>
    </sys_script_vtable>
</record_update>
